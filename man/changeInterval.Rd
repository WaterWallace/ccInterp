% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/changeInterval.R
\name{changeInterval}
\alias{changeInterval}
\title{Change Interval}
\usage{
changeInterval(
  ts,
  dt = 1,
  Interval = "Daily",
  start = 0,
  end = 0,
  offset = 0,
  option = "fmean",
  rounded = TRUE,
  decimals = 3
)
}
\arguments{
\item{ts}{dataframe of posixct time (time in seconds) and an instantaneous
value (per second i.e. cumecs), and optionally a quality code}

\item{dt}{datatype of the input data, 1 = inst; 2 = fmean
default is 1 for instantaenous, the inputs can be randomly spaced in time.
2 for fmean when you are converting evenly spaced forward means such as daily
 averages.}

\item{Interval}{string or number, "Hourly", "Daily", "Monthly", "Annual", or
a number of minutes.}

\item{start}{a timestamp written, that can be converted to posixct.
i.e. "2016-12-17 05:00" or numeric, seconds since "1970-01-01" i.e. 1481914800}

\item{end}{same as start}

\item{offset}{minutes to offset the averaging window, not the result
for Interval "Annual", offset is the start month, i.e. 10 for October}

\item{option}{"fmean", "inst", "sum", "resample"
fmean Calcaulte a forward mean, i.e. the daily mean for this day
inst Calculate instantaenous values
sum Accumulate daily i.e. to calculate a total or volume, units unchanged
resample interpolate at intervals, no transformation}

\item{rounded}{round the time to the hour}

\item{linearInterp}{adds linearly interpolated points at new interval timestep
leave as true, unpredictable result with false, particularly over long gaps}
}
\value{
dataframe with tiemstamp as posixct a trapezoidal integrated rate
and quality code if included.
}
\description{
Trapezoidal integration of a time series
}
\details{
For downsampling intervals, for example hourly to daily.
}
\examples{


data(xy_data)
D <- within(xy_data, {
  x <- as.POSIXct(x * 60 * 60 * 24, origin = "1970-01-01")
})

plot(D[50:100, ])

# daily average of forward means
daily <- changeInterval(D, Interval = "Daily")
head(daily)
lines(daily)


#the same interval, but without automatically adjusting the offset to
#output by using "Daily" as interval
twentyfourhour <- changeInterval(D, Interval = 24 * 60)
head(twentyfourhour)


# output an hourly forward mean (timestamp at beginning of period ),
hourly <- changeInterval(D, Interval = "Hourly", option = "fmean")
f.hourly <- approxfun(hourly$Date, hourly$FMean, method = "constant")
ts <- seq(hourly$Date[1], hourly$Date[nrow(hourly)], by = 10 * 60)
lines(ts, f.hourly(ts), col = "red")

# output an hourly instanaenous (timestamp in middle of averaging period ),
# offset average window by 30 minutes to output datapoints on the hour.
# essentially it is the average of the period 30 mins before and 30 mins
# after the timestamp.
hourlyInst <- changeInterval(D, Interval = "Hourly", offset = 0, option = "inst")
head(hourlyInst)
lines(hourlyInst, col = "orange")
}
